[["index.html", "Console Commands Overview 0.1 Why Github beyond R-DAVIS? 0.2 Objectives for tutorial", " Console Commands Tara Pozzi 2024-12-05 Overview 0.1 Why Github beyond R-DAVIS? You’ve gotten familiar with the benefits of using Github already - keeping track of your work during this class, pushing your homeworks each week, downloading our tutorial scripts, etc. What about beyond this class? Github offers a flexible, collaborative, and free storage of your work that can be very helpful when you want to back up your work or share your files easily with a collaborator. For these reasons, this tutorial focuses on how to use Github for your future R projects! 0.2 Objectives for tutorial Learn how to create a new repository in Github &amp; connect existing local R projects Familiarize with Git commands for project management "],["creating-a-github-repository.html", "1 Creating a Github Repository 1.1 Introduction 1.2 Creating a new repo in Github 1.3 Connecting an existing R project on your computer to Github", " 1 Creating a Github Repository 1.1 Introduction This page covers how to create a new repository (or repo for short) in Github. The first section talks about how to create a repository from scratch in Github. The second section covers the situation where you have want to upload a local repo onto github. This tutorial assumes you have already connected the SSH key from your computer to Github. If not, see this SSH key tutorial. 1.2 Creating a new repo in Github *This is largely adapted from Github’s help page.* These instructions are when you want to create a repo under your Github user profile. Sign into your Github account. Click on your profile icon in the upper right hand corner and select “Your Repositories” Press the green button that says “New” From here, there are lots of specific aspects of the repo you may want to specify: Repository template: Most often you’ll probably have no template, but this is the spot where you would build a repo based on an existing template if you did have one. Owner: This is where you specify whether you want to make the repo under your Github username or affiliated organizations. Repository name: Keep is short and sweet, plus make sure there are no blank spaces in between words Description: This part is optional, but it will show up in the right-hand column on your project repo so sometimes people will put a quick tl;dr version of the project README here or if the repo links to a website you could put the url here. Add a README file: I suggest adding a README because essentially it is an information document to describe the purpose of the repo &amp; how others may want to use it (if its public or shared with collaborators) Add .gitignore: I also suggest adding this file to the repo (although in some cases in might not be necessary). You can select the “R” template file from the dropdown menu. This file is helpful if there are any aspects of the repo that you do not want uploaded to Github from your local version of the repo (e.g., large or confidential data files, scratch scripts, etc.) License: This is something to think about with public repositories &amp; how you want others to use your code. Lots of options, definitely do some additional reading if this is something you want to add. ** Note: You can always manually add a README.md, .gitignore, and license.md later down the road. So some people will just start with a bare bones version of a repo and add these files in as they are ready. Now hit “Create repository” and it will officially add the new repo to your account (or organization if that’s what you selected) Now you can download the repo to your computer. Under the green “Code” button, select “SSH”, and copy the url. Lastly, clone the repo onto your computer by either File -&gt; New Project -&gt; Verision Control -&gt; Git or using terminal: git clone &lt;GITHUB REPO URL&gt; 1.3 Connecting an existing R project on your computer to Github There may be times where you create a new R project on your local computer and then realize you want to also back this up on Github. Setting up a Github repo is a little different in this situation. Still go through the process of creating a new repo just as we did in the previous section. Open the R project in Rstudio that you would like to add to Github and navigate to Tools -&gt; Version Control -&gt; Project Setup Click SVN/Git tab and select “git“ as the version control system A window will pop up asking you to “Confirm New Git Repository”. Select “Yes”. Another window will pop up saying “Confirm Restart RStudio”. Press “Yes”. After Rstudio reopens, confirm that there is a Git tab in the environment pane Now, you’ll need to enter some code into terminal to officially connect your local R project to the remote Github repo Now add remote repo to existing local repo git remote add origin &lt;GITHUB REPO URL&gt; git remote –verbose git remote show origin Now set up github to track changes on your local comp git push -u origin main "],["console-commands.html", "2 Console Commands", " 2 Console Commands Using your terminal to communicate with Git is a powerful way to understand how your local R project interacts with your remote GitHub repository. The command-line interface allows you to execute Git commands quickly, troubleshoot issues, and get a clear view of your repository’s status without relying on graphical interfaces that may not tell you important details. Here are some common commands: Stage commits and push changes to Github: git add &lt;FILENAME&gt; git commit -m”&lt;INSERT MESSAGE&gt;” git push Unstage a commit (same as un-checking a changed file) git reset –- &lt;FILENAME&gt; Remove a previously tracked file git rm &lt;FILENAME&gt; Check the status of files (you can also do this by viewing the status column under the “Git” tab) git status git log Check out what has changed in your files git diff Pull remote changes into local repo git pull git pull –-ff-only (fast forward only is often the default and this means that git will only pull files that have no merge conflicts with your local repo) But oops you have work on your computer &amp; don’t want to overwrite it! Often you will notice when you go to push your changes &amp; you get an error that say something about the main being ahead of the origin (your remote repo). Here’s a helpful explainer for tricky pulls! The take home commands are: Store changes elsewhere temporarily &amp; then replace them after pull git stash save git pull git stash pop BUT this won’t work if you are have a conflict with the new files git reset (reset the git process) git stash drop One option: Fetch and merge will send you to a merge conflict editor to manual resolve conflicts. Probably most robust option. git pull Another option: Pull and rebase which is smoother at first, but might get complicated later. git pull –-rebase Use git rebase –-abort if you are experiencing a lot of merge conflicts still! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
