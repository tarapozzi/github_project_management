[["index.html", "Managing a Project Overview 0.1 Why Github beyond R-DAVIS? 0.2 Objectives for tutorial 0.3 Introduction 0.4 Creating a new repository in Github 0.5 Connecting an existing R project on your computer to Github 0.6 Introduction 0.7 Repo Collaborator Settings 0.8 Branches 0.9 Command line bail outs!", " Managing a Project Tara Pozzi 2024-12-04 Overview YOUR DESCRIPTION, LEARNING GOALS, PREREQUISITES, ETC 0.1 Why Github beyond R-DAVIS? You’ve gotten familiar with the benefits of using Github already - keeping track of your work during this class, pushing your homeworks each week, downloading our tutorial scripts, etc. What about beyond this class? Github offers a flexible, collaborative, and free storage of your work that can be very helpful when you want to back up your work or share your files easily with a collaborator. For these reasons, this tutorial focuses on how to use Github for your future R projects! 0.2 Objectives for tutorial Learn how to create a new project repository in Github Project management with multiple collaborators (e.g., branches, merge conflicts, etc.) Additional ways you may use Github repositories: websites, dissertation, add an existing folder to your github 0.3 Introduction This page covers how to create a new repository in Github. The first section talks about how to create a repository from scratch in Github. The second section covers the situation where you have want to upload a local repository onto github. This tutorial assumes you have already connected the SSH key from your computer to Github. If not, see this SSH key tutorial. 0.4 Creating a new repository in Github *This is largely adapted from Github’s help page.* These instructions are when you want to create a repository under your Github user profile. Sign into your Github account. Click on your profile icon in the upper right hand corner and select “Your Repositories” Press the green button that says “New” From here, there are lots of specific aspects of the respository you may want to specify: Repository template: Most often you’ll probably have no template, but this is the spot where you would build a repo based on an existing template if you did have one. Owner: This is where you specify whether you want to make the repo under your Github username or affiliated organizations. Repository name: Keep is short and sweet, plus make sure there are no blank spaces in between words Description: This part is optional, but it will show up in the right-hand column on your project repo so sometimes people will put a quick tl;dr version of the project README here or if the repo links to a website you could put the url here. Add a README file: I suggest adding a README because essentially is an information document to describe the purpose of the repo &amp; how others may want to use it (if its public or shared with collaborators) Add .gitignore: I also suggest adding this file to the repo (although in some cases in might not be necessary). You can select the “R” template file from the dropdown menu. This file is helpful if there are any aspects of the repo that you do not want uploaded to Github from your local vesion of the repo (e.g., large or confidential data files, scratch scripts, etc.) License: This is something to think about with public repositories &amp; how you want others to use your code. Lots of options, definitely do some additional reading if this is something you want to add. ** Note: You can always manually add a README.md, .gitignore, and license.md later down the road. So some people will just start with a bare bones version of a repo and add these files in as they are ready. Now hit “Create repository” and it will officially add the new repo to your account (or organization if that’s what you selected) Now you can download the repo to your computer. Under the green “Code” button, select “SSH”, and copy the url. Lastly, clone the repo onto your computer by either File -&gt; New Project -&gt; Verision Control -&gt; Git or using terminal: git clone \\[insert repo url\\] 0.5 Connecting an existing R project on your computer to Github There may be times where you create a new R project on your local computer and then realize you want to also back this up on Github. Setting up a Github repo is a little different in this situation. Still go through the process of creating a new repository just as we did in the previous section. Open the R project in Rstudio that you would like to add to Github and navigate to Tools -&gt; Version Control -&gt; Project Setup Click SVN/Git tab and select “git“ as the version control system A window will pop up asking you to “Confirm New Git Repository”. Select “Yes”. Another window will pop up saying “Confirm Restart RStudio”. Press “Yes”. After Rstudio reopens, confirm that there is a Git tab in the environment pane Now, you’ll need to enter some code into terminal to officially connect your local R project to the remote Github repo Identify the working directory file path (no quotes) &amp; enter the following: cd \\[insert wd file path\\] Initiate upstream tracking with the Github repo url git remote add origin \\[insert github repo url\\] Then pull files down onto local R project git pull origin main ** this might be master instead of main depending on what your branch was called when you made your repo Finally, set up github to track changes on your local comp git push -u origin main Now lets try it out! This time, let’s try it from the command line Add your changes git add . **this will add ALL your changes. alternatively, you can specify the changed file Commit your changes git commit -m”insert message” And finally push! git push Now, head back to your Github repo and verify that the changes when through 0.6 Introduction Oftentimes you will find yourself collaborating with others on a Github repo. Here are some tips and tricks to hopefully save you some grief! https://medium.com/@jonathanmines/the-ultimate-github-collaboration-guide-df816e98fb67 0.7 Repo Collaborator Settings 0.8 Branches 0.9 Command line bail outs! 0.9.1 Merge 0.9.2 Overwite "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
